import { __spread } from 'tslib';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { filter } from 'rxjs/operators/filter';
import { InjectionToken, Inject, Injectable, ChangeDetectionStrategy, Component, Input, Output, EventEmitter, HostBinding, ElementRef, PLATFORM_ID, Directive, Renderer2, ComponentFactoryResolver, ViewContainerRef, NgModule } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { map } from 'rxjs/operators/map';
import { isPlatformBrowser, CommonModule } from '@angular/common';
import { tap } from 'rxjs/operators/tap';
import { fromEvent } from 'rxjs/observable/fromEvent';
import { debounceTime } from 'rxjs/operators/debounceTime';
import { Subject } from 'rxjs/Subject';
import { switchMap } from 'rxjs/operators/switchMap';
import { zip } from 'rxjs/observable/zip';

var GalleryAction = {
    INITIALIZED: 'initialized',
    ITEMS_CHANGED: 'itemsChanged',
    INDEX_CHANGED: 'indexChanged',
    OPENED: 'opened',
    CLOSED: 'closed',
};
var defaultState = {
    action: GalleryAction.INITIALIZED,
    currIndex: 0,
    hasNext: false,
    hasPrev: false,
    items: []
};
var defaultConfig = {
    gestures: true,
    panSensitivity: 25,
    counter: true,
    nav: true,
    dots: false,
    thumb: true,
    thumbWidth: 120,
    thumbHeight: 90,
    thumbPosition: 'bottom',
    disableThumb: false,
    slidingDirection: 'horizontal',
    zoomOut: 0
};
var GalleryRef = /** @class */ (function () {
    function GalleryRef(config, state) {
        if (config === void 0) { config = defaultConfig; }
        if (state === void 0) { state = defaultState; }
        this.config = config;
        this.state = state;
        this.state$ = new BehaviorSubject(state);
        this.config$ = new BehaviorSubject(defaultConfig);
        this.setConfig(config);
    }
    GalleryRef.prototype.setConfig = function (config) {
        this.config = Object.assign({}, defaultConfig, this.config, config);
        this.config$.next(this.config);
    };
    GalleryRef.prototype.setState = function (state) {
        this.state = Object.assign({}, this.state, state);
        this.state$.next(this.state);
    };
    GalleryRef.prototype.add = function (item, active) {
        var items = __spread(this.state.items, [item]);
        this.setState({
            action: GalleryAction.ITEMS_CHANGED,
            items: items,
            hasNext: items.length > 1,
            currIndex: active ? items.length - 1 : this.state.currIndex
        });
    };
    GalleryRef.prototype.remove = function (i) {
        var items = __spread(this.state.items.slice(0, i), this.state.items.slice(i + 1, this.state.items.length));
        this.setState({
            action: GalleryAction.ITEMS_CHANGED,
            items: items,
            hasNext: items.length > 1,
            hasPrev: i > 0
        });
    };
    GalleryRef.prototype.load = function (items) {
        if (items) {
            this.setState({
                action: GalleryAction.ITEMS_CHANGED,
                items: items,
                hasNext: items.length > 1,
                hasPrev: false
            });
        }
    };
    GalleryRef.prototype.set = function (i) {
        if (i !== this.state.currIndex) {
            this.setState({
                action: GalleryAction.INDEX_CHANGED,
                currIndex: i,
                hasNext: i < this.state.items.length - 1,
                hasPrev: i > 0
            });
        }
    };
    GalleryRef.prototype.next = function () {
        if (this.state.hasNext) {
            this.set(this.state.currIndex + 1);
        }
        else if (this.config.loop) {
            this.set(0);
        }
    };
    GalleryRef.prototype.prev = function () {
        if (this.state.hasPrev) {
            this.set(this.state.currIndex - 1);
        }
        else if (this.config.loop) {
            this.set(this.state.items.length - 1);
        }
    };
    GalleryRef.prototype.reset = function () {
        this.setState(defaultState);
    };
    GalleryRef.prototype.destroy = function () {
        this.state$.complete();
        this.config$.complete();
    };
    GalleryRef.prototype.initialized = function () {
        return this.state$.pipe(filter(function (state) { return state.action === GalleryAction.INITIALIZED; }));
    };
    GalleryRef.prototype.itemsChanged = function () {
        return this.state$.pipe(filter(function (state) { return state.action === GalleryAction.ITEMS_CHANGED; }));
    };
    GalleryRef.prototype.indexChanged = function () {
        return this.state$.pipe(filter(function (state) { return state.action === GalleryAction.INDEX_CHANGED; }));
    };
    return GalleryRef;
}());
var GALLERY_CONFIG = new InjectionToken('galleryConfig');
var Gallery = /** @class */ (function () {
    function Gallery(config) {
        this._instances = {};
        this.config = Object.assign({}, defaultConfig, config);
    }
    Gallery.prototype.ref = function (id, config) {
        if (id === void 0) { id = 'root'; }
        if (this._instances[id] instanceof GalleryRef) {
            return this._instances[id];
        }
        else {
            config = Object.assign({}, this.config, config);
            return this._instances[id] = new GalleryRef(config);
        }
    };
    Gallery.prototype.destroy = function (id) {
        if (id === void 0) { id = 'root'; }
        if (this._instances[id] instanceof GalleryRef) {
            this._instances[id].destroy();
            this._instances[id] = null;
        }
    };
    Gallery.prototype.destroyAll = function () {
        var _this = this;
        Object.keys(this._instances)
            .map(function (key) {
            _this._instances[key].destory();
            _this._instances[key] = null;
        });
    };
    Gallery.prototype.resetAll = function () {
        var _this = this;
        Object.keys(this._instances)
            .map(function (id) {
            if (id === void 0) { id = 'root'; }
            return _this._instances[id].gallery;
        })
            .map(function (gallery) { return gallery.reset(); });
    };
    return Gallery;
}());
Gallery.decorators = [
    { type: Injectable },
];
Gallery.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Inject, args: [GALLERY_CONFIG,] },] },
]; };
var ImageItemComponent = /** @class */ (function () {
    function ImageItemComponent() {
    }
    return ImageItemComponent;
}());
ImageItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'image-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                template: "\n    <div [lazyImage]=\"data?.src\" (loading)=\"loading = $event\"></div>\n    <i class=\"g-loading\" *ngIf=\"loading\"></i>\n  ",
                styles: ["\n    :host {\n      position: relative;\n      display: block;\n      width: 100%;\n      height: 100%;\n    }\n    div {\n      background-position: center center;\n      background-size: cover;\n      width: 100%;\n      height: 100%;\n    }\n  "],
            },] },
];
ImageItemComponent.ctorParameters = function () { return []; };
ImageItemComponent.propDecorators = {
    "data": [{ type: Input },],
};
var VideoItemComponent = /** @class */ (function () {
    function VideoItemComponent(sanitizer) {
        this.sanitizer = sanitizer;
    }
    return VideoItemComponent;
}());
VideoItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'video-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                template: '<video controls [src]="sanitizer.bypassSecurityTrustResourceUrl(data?.src)"></video>',
                styles: ["\n    video {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n  "]
            },] },
];
VideoItemComponent.ctorParameters = function () { return [
    { type: DomSanitizer, },
]; };
VideoItemComponent.propDecorators = {
    "data": [{ type: Input },],
};
var IframeItemComponent = /** @class */ (function () {
    function IframeItemComponent(sanitizer) {
        this.sanitizer = sanitizer;
    }
    return IframeItemComponent;
}());
IframeItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'iframe-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                template: "\n    <iframe frameborder=\"0\"\n            allowfullscreen\n            [src]=\"sanitizer.bypassSecurityTrustResourceUrl(data?.src)\"></iframe>\n  ",
                styles: ["\n    iframe {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n  "]
            },] },
];
IframeItemComponent.ctorParameters = function () { return [
    { type: DomSanitizer, },
]; };
IframeItemComponent.propDecorators = {
    "data": [{ type: Input },],
};
var ThumbnailItemComponent = /** @class */ (function () {
    function ThumbnailItemComponent() {
    }
    return ThumbnailItemComponent;
}());
ThumbnailItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'thumbnail-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                template: "\n    <div [lazyImage]=\"data.thumbSrc\"></div>\n  ",
                styles: ["\n    :host {\n      width: 100%;\n      height: 100%;\n    }\n    div {\n      width: 100%;\n      height: 100%;\n      background-size: cover;\n      background-position: center center;\n    }\n  "]
            },] },
];
ThumbnailItemComponent.ctorParameters = function () { return []; };
ThumbnailItemComponent.propDecorators = {
    "data": [{ type: Input },],
};
var ImageItem = /** @class */ (function () {
    function ImageItem(src, thumb) {
        this.component = ImageItemComponent;
        this.thumbComponent = ThumbnailItemComponent;
        this.data = {
            src: src,
            thumbSrc: thumb
        };
    }
    return ImageItem;
}());
var VideoItem = /** @class */ (function () {
    function VideoItem(src, thumb) {
        this.component = VideoItemComponent;
        this.thumbComponent = ThumbnailItemComponent;
        this.data = {
            src: src,
            thumbSrc: thumb
        };
    }
    return VideoItem;
}());
var IframeItem = /** @class */ (function () {
    function IframeItem(src, thumb) {
        this.component = IframeItemComponent;
        this.thumbComponent = ThumbnailItemComponent;
        this.data = {
            src: src,
            thumbSrc: thumb
        };
    }
    return IframeItem;
}());
var YoutubeItem = /** @class */ (function () {
    function YoutubeItem(src, thumbSrc) {
        this.component = IframeItemComponent;
        this.thumbComponent = ThumbnailItemComponent;
        this.data = {
            src: "//youtube.com/embed/" + src + "?wmode=transparent",
            thumbSrc: thumbSrc ? thumbSrc : "//img.youtube.com/vi/" + src + "/default.jpg"
        };
    }
    return YoutubeItem;
}());
var GalleryComponent = /** @class */ (function () {
    function GalleryComponent(_gallery) {
        this._gallery = _gallery;
        this.gestures = this._gallery.config.gestures;
        this.panSensitivity = this._gallery.config.panSensitivity;
        this.zoomOut = this._gallery.config.zoomOut;
        this.dots = this._gallery.config.dots;
        this.thumb = this._gallery.config.thumb;
        this.nav = this._gallery.config.nav;
        this.counter = this._gallery.config.counter;
        this.thumbWidth = this._gallery.config.thumbWidth;
        this.thumbHeight = this._gallery.config.thumbHeight;
        this.disableThumb = this._gallery.config.disableThumb;
        this.thumbPosition = this._gallery.config.thumbPosition;
        this.slidingDirection = this._gallery.config.slidingDirection;
        this.destroyRef = true;
        this.indexChange = new EventEmitter();
        this.itemsChange = new EventEmitter();
    }
    GalleryComponent.prototype.getConfig = function () {
        return {
            gestures: this.gestures,
            panSensitivity: this.panSensitivity,
            zoomOut: this.zoomOut,
            counter: this.counter,
            nav: this.nav,
            dots: this.dots,
            thumb: this.thumb,
            thumbWidth: this.thumbWidth,
            thumbHeight: this.thumbHeight,
            thumbPosition: this.thumbPosition,
            disableThumb: this.disableThumb,
            slidingDirection: this.slidingDirection
        };
    };
    GalleryComponent.prototype.onIndexChange = function (i) {
        switch (i) {
            case 'next':
                this.galleryRef.next();
                break;
            case 'prev':
                this.galleryRef.prev();
                break;
            default:
                this.galleryRef.set(i);
        }
    };
    GalleryComponent.prototype.ngOnChanges = function () {
        if (this.galleryRef instanceof GalleryRef) {
            this.galleryRef.setConfig(this.getConfig());
            if (this.items !== this.galleryRef.state.items) {
                this.load(this.items);
            }
        }
    };
    GalleryComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.galleryRef = this._gallery.ref(this.id);
        this.galleryRef.setConfig(this.getConfig());
        this.load(this.items);
        if (this.indexChange.observers.length) {
            this._indexChange$ = this.galleryRef.indexChanged().subscribe(function (e) { return _this.indexChange.next(e); });
        }
        if (this.itemsChange.observers.length) {
            this._itemChange$ = this.galleryRef.itemsChanged().subscribe(function (e) { return _this.itemsChange.next(e); });
        }
    };
    GalleryComponent.prototype.ngOnDestroy = function () {
        if (this._indexChange$) {
            this._indexChange$.unsubscribe();
        }
        if (this._itemChange$) {
            this._itemChange$.unsubscribe();
        }
        if (this.destroyRef) {
            this.galleryRef.reset();
        }
    };
    GalleryComponent.prototype.load = function (items) {
        this.galleryRef.load(items);
    };
    GalleryComponent.prototype.add = function (item, active) {
        this.galleryRef.add(item, active);
    };
    GalleryComponent.prototype.remove = function (i) {
        this.galleryRef.remove(i);
    };
    GalleryComponent.prototype.next = function () {
        this.galleryRef.next();
    };
    GalleryComponent.prototype.prev = function () {
        this.galleryRef.prev();
    };
    GalleryComponent.prototype.set = function (i) {
        this.galleryRef.set(i);
    };
    GalleryComponent.prototype.reset = function () {
        this.galleryRef.reset();
    };
    return GalleryComponent;
}());
GalleryComponent.decorators = [
    { type: Component, args: [{
                selector: 'gallery',
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                template: "\n    <gallery-core [state]=\"galleryRef.state$ | async\"\n                  [config]=\"galleryRef.config$ | async\"\n                  (indexChange)=\"onIndexChange($event)\"></gallery-core>\n    <ng-content></ng-content>\n  "
            },] },
];
GalleryComponent.ctorParameters = function () { return [
    { type: Gallery, },
]; };
GalleryComponent.propDecorators = {
    "id": [{ type: Input },],
    "items": [{ type: Input },],
    "gestures": [{ type: Input },],
    "panSensitivity": [{ type: Input },],
    "zoomOut": [{ type: Input },],
    "dots": [{ type: Input },],
    "thumb": [{ type: Input },],
    "nav": [{ type: Input },],
    "counter": [{ type: Input },],
    "thumbWidth": [{ type: Input },],
    "thumbHeight": [{ type: Input },],
    "disableThumb": [{ type: Input },],
    "thumbPosition": [{ type: Input },],
    "slidingDirection": [{ type: Input },],
    "destroyRef": [{ type: Input },],
    "indexChange": [{ type: Output },],
    "itemsChange": [{ type: Output },],
};
var GalleryCoreComponent = /** @class */ (function () {
    function GalleryCoreComponent() {
        this.indexChange = new EventEmitter();
    }
    Object.defineProperty(GalleryCoreComponent.prototype, "thumbPosition", {
        get: function () {
            return this.config.thumbPosition;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GalleryCoreComponent.prototype, "slidingDirection", {
        get: function () {
            return this.config.slidingDirection;
        },
        enumerable: true,
        configurable: true
    });
    return GalleryCoreComponent;
}());
GalleryCoreComponent.decorators = [
    { type: Component, args: [{
                selector: 'gallery-core',
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                template: "\n    <gallery-thumb *ngIf=\"config.thumb\"\n                  [state]=\"state\"\n                  [config]=\"config\"\n                  (indexChange)=\"indexChange.emit($event)\">\n    </gallery-thumb>\n    <div class=\"g-box\">\n      <gallery-slider [state]=\"state\"\n                      [config]=\"config\"\n                      (indexChange)=\"indexChange.emit($event)\">\n        <gallery-nav *ngIf=\"config.nav && state.items.length > 1\"\n                    [state]=\"state\"\n                    [config]=\"config\"\n                    (indexChange)=\"indexChange.emit($event)\">\n        </gallery-nav>\n      </gallery-slider>\n      <gallery-dots *ngIf=\"config.dots\"\n                    [state]=\"state\"\n                    (indexChange)=\"indexChange.emit($event)\">\n      </gallery-dots>\n      <gallery-counter *ngIf=\"config.counter\"\n                      [state]=\"state\">\n      </gallery-counter>\n    </div>\n  "
            },] },
];
GalleryCoreComponent.ctorParameters = function () { return []; };
GalleryCoreComponent.propDecorators = {
    "state": [{ type: Input },],
    "config": [{ type: Input },],
    "indexChange": [{ type: Output },],
    "thumbPosition": [{ type: HostBinding, args: ['attr.thumbPosition',] },],
    "slidingDirection": [{ type: HostBinding, args: ['attr.slidingDirection',] },],
};
var GalleryNavComponent = /** @class */ (function () {
    function GalleryNavComponent() {
        this.indexChange = new EventEmitter();
    }
    return GalleryNavComponent;
}());
GalleryNavComponent.decorators = [
    { type: Component, args: [{
                selector: 'gallery-nav',
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                template: "\n    <i *ngIf=\"config.loop || state.hasPrev\" class=\"g-nav-prev\" (tapClick)=\"indexChange.emit('prev')\"></i>\n    <i *ngIf=\"config.loop || state.hasNext\" class=\"g-nav-next\" (tapClick)=\"indexChange.emit('next')\"></i>\n  "
            },] },
];
GalleryNavComponent.ctorParameters = function () { return []; };
GalleryNavComponent.propDecorators = {
    "state": [{ type: Input },],
    "config": [{ type: Input },],
    "indexChange": [{ type: Output },],
};
var GalleryThumbComponent = /** @class */ (function () {
    function GalleryThumbComponent(_el) {
        var _this = this;
        this._el = _el;
        this.stateStream$ = new BehaviorSubject({ value: 0, active: false });
        this.indexChange = new EventEmitter();
        this.thumbState$ = this.stateStream$.pipe(map(function (state) { return ({
            style: _this.thumbsStyle(state.value),
            active: state.active
        }); }));
    }
    GalleryThumbComponent.prototype.ngOnChanges = function () {
        this.stateStream$.next({ value: 0, active: false });
    };
    GalleryThumbComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.config.gestures && !this.config.disableThumb && Hammer) {
            this.mc = new Hammer(this._el.nativeElement);
            this.mc.get('pan').set({ direction: Hammer.DIRECTION_ALL });
            this.mc.on('pan', function (e) {
                switch (_this.config.thumbPosition) {
                    case 'right':
                    case 'left':
                        _this.stateStream$.next({ value: e.deltaY, active: true });
                        if (e.isFinal) {
                            _this.stateStream$.next({ value: 0, active: false });
                            _this.verticalPan(e);
                        }
                        break;
                    case 'top':
                    case 'bottom':
                        _this.stateStream$.next({ value: e.deltaX, active: true });
                        if (e.isFinal) {
                            _this.stateStream$.next({ value: 0, active: false });
                            _this.horizontalPan(e);
                        }
                }
            });
        }
    };
    GalleryThumbComponent.prototype.ngOnDestroy = function () {
        if (this.mc) {
            this.mc.destroy();
        }
    };
    GalleryThumbComponent.prototype.thumbsStyle = function (delta) {
        var value;
        switch (this.config.thumbPosition) {
            case 'top':
            case 'bottom':
                this.height = this.config.thumbHeight + 'px';
                value = -(this.state.currIndex * this.config.thumbWidth) - (this.config.thumbWidth / 2 - delta);
                return {
                    transform: "translate3d(" + value + "px, 0, 0)",
                    width: this.state.items.length * this.config.thumbWidth + 'px',
                    height: '100%'
                };
            case 'left':
            case 'right':
                this.width = this.config.thumbWidth + 'px';
                value = -(this.state.currIndex * this.config.thumbHeight) - (this.config.thumbHeight / 2 - delta);
                return {
                    transform: "translate3d(0, " + value + "px, 0)",
                    width: '100%',
                    height: this.state.items.length * this.config.thumbHeight + 'px',
                };
        }
    };
    GalleryThumbComponent.prototype.verticalPan = function (e) {
        if (e.velocityY > 0.3) {
            this.indexChange.emit('prev');
        }
        else if (e.velocityY < -0.3) {
            this.indexChange.emit('next');
        }
        else {
            if (e.deltaY / 2 <= -this.config.thumbHeight * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('next');
            }
            else if (e.deltaY / 2 >= this.config.thumbHeight * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('prev');
            }
            else {
                this.indexChange.emit(this.state.currIndex);
            }
        }
    };
    GalleryThumbComponent.prototype.horizontalPan = function (e) {
        if (e.velocityX > 0.3) {
            this.indexChange.emit('prev');
        }
        else if (e.velocityX < -0.3) {
            this.indexChange.emit('next');
        }
        else {
            if (e.deltaX / 2 <= -this.config.thumbWidth * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('next');
            }
            else if (e.deltaX / 2 >= this.config.thumbWidth * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('prev');
            }
            else {
                this.indexChange.emit(this.state.currIndex);
            }
        }
    };
    return GalleryThumbComponent;
}());
GalleryThumbComponent.decorators = [
    { type: Component, args: [{
                selector: 'gallery-thumb',
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                template: "\n    <div *ngIf=\"thumbState$ | async; let thumbState\"\n         class=\"g-thumb-container\">\n      <div class=\"g-thumbs\"\n           [class.-no-transition]=\"thumbState.active\"\n           [ngStyle]=\"thumbState.style\">\n        <div *ngFor=\"let item of state.items;let i = index\"\n             class=\"g-thumb\"\n             [class.-current]=\"i === state.currIndex\"\n             (tapClick)=\"indexChange.emit(i)\"\n             [tapClickDisabled]=\"config.disableThumb\">\n          <ng-container [item]=\"item\" type=\"thumb\"></ng-container>\n        </div>\n      </div>\n    </div>\n  "
            },] },
];
GalleryThumbComponent.ctorParameters = function () { return [
    { type: ElementRef, },
]; };
GalleryThumbComponent.propDecorators = {
    "state": [{ type: Input },],
    "config": [{ type: Input },],
    "indexChange": [{ type: Output },],
    "height": [{ type: HostBinding, args: ['style.height',] },],
    "width": [{ type: HostBinding, args: ['style.width',] },],
};
var GalleryDotsComponent = /** @class */ (function () {
    function GalleryDotsComponent() {
        this.indexChange = new EventEmitter();
    }
    return GalleryDotsComponent;
}());
GalleryDotsComponent.decorators = [
    { type: Component, args: [{
                selector: 'gallery-dots',
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                template: "\n    <div class=\"g-dot\"\n         *ngFor=\"let item of state.items; let i = index\"\n         (tapClick)=\"indexChange.emit(i)\">\n      <div class=\"g-dot-inner\"\n           [class.-current]=\"i === state.currIndex\"></div>\n    </div>\n  "
            },] },
];
GalleryDotsComponent.ctorParameters = function () { return []; };
GalleryDotsComponent.propDecorators = {
    "state": [{ type: Input },],
    "indexChange": [{ type: Output },],
};
var GallerySliderComponent = /** @class */ (function () {
    function GallerySliderComponent(_el, platform) {
        var _this = this;
        this._el = _el;
        this.platform = platform;
        this.stateStream$ = new BehaviorSubject({ value: 0, active: false });
        this.indexChange = new EventEmitter();
        this.sliderState$ = this.stateStream$.pipe(map(function (state) { return ({
            style: _this.sliderStyle(state.value),
            active: state.active
        }); }));
    }
    GallerySliderComponent.prototype.viewDepth = function () {
        return { transform: "perspective(50px) translate3d(0, 0, " + -this.config.zoomOut + "px)" };
    };
    GallerySliderComponent.prototype.sliderStyle = function (delta) {
        switch (this.config.slidingDirection) {
            case 'horizontal':
                return {
                    transform: "translate3d(" + (-(this.state.currIndex * this._el.nativeElement.offsetWidth) + delta) + "px, 0, 0)",
                    width: this._el.nativeElement.offsetWidth * this.state.items.length + 'px',
                    height: '100%'
                };
            case 'vertical':
                return {
                    transform: "translate3d(0, " + (-(this.state.currIndex * this._el.nativeElement.offsetHeight) + delta) + "px, 0)",
                    width: '100%',
                    height: this._el.nativeElement.offsetHeight * this.state.items.length + 'px',
                };
        }
    };
    GallerySliderComponent.prototype.ngOnChanges = function () {
        this.stateStream$.next({ value: 0, active: false });
    };
    GallerySliderComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.config.gestures && Hammer) {
            this.mc = new Hammer(this._el.nativeElement);
            this.mc.get('pan').set({ direction: Hammer.DIRECTION_ALL });
            this.mc.on('pan', function (e) {
                switch (_this.config.slidingDirection) {
                    case 'horizontal':
                        _this.stateStream$.next({ value: e.deltaX, active: true });
                        if (e.isFinal) {
                            _this.stateStream$.next({ value: 0, active: false });
                            _this.horizontalPan(e);
                        }
                        break;
                    case 'vertical':
                        _this.stateStream$.next({ value: e.deltaY, active: true });
                        if (e.isFinal) {
                            _this.stateStream$.next({ value: 0, active: false });
                            _this.verticalPan(e);
                        }
                }
            });
        }
        if (isPlatformBrowser(this.platform)) {
            this.resizeSub$ = fromEvent(window, 'resize').pipe(debounceTime(200), tap(function () { return _this.stateStream$.next(_this.stateStream$.getValue()); })).subscribe();
        }
        setTimeout(function () {
            _this.stateStream$.next({ value: 0, active: false });
        }, 300);
    };
    GallerySliderComponent.prototype.ngOnDestroy = function () {
        if (this.mc) {
            this.mc.destroy();
        }
        if (this.resizeSub$) {
            this.resizeSub$.unsubscribe();
        }
    };
    GallerySliderComponent.prototype.verticalPan = function (e) {
        if (e.velocityY > 0.3) {
            this.indexChange.emit('prev');
        }
        else if (e.velocityY < -0.3) {
            this.indexChange.emit('next');
        }
        else {
            if (e.deltaY / 2 <= -this._el.nativeElement.offsetHeight * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('next');
            }
            else if (e.deltaY / 2 >= this._el.nativeElement.offsetHeight * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('prev');
            }
            else {
                this.indexChange.emit(this.state.currIndex);
            }
        }
    };
    GallerySliderComponent.prototype.horizontalPan = function (e) {
        if (e.velocityX > 0.3) {
            this.indexChange.emit('prev');
        }
        else if (e.velocityX < -0.3) {
            this.indexChange.emit('next');
        }
        else {
            if (e.deltaX / 2 <= -this._el.nativeElement.offsetWidth * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('next');
            }
            else if (e.deltaX / 2 >= this._el.nativeElement.offsetWidth * this.state.items.length / this.config.panSensitivity) {
                this.indexChange.emit('prev');
            }
            else {
                this.indexChange.emit(this.state.currIndex);
            }
        }
    };
    return GallerySliderComponent;
}());
GallerySliderComponent.decorators = [
    { type: Component, args: [{
                selector: 'gallery-slider',
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                template: "\n    <div *ngIf=\"sliderState$ | async; let sliderState\"\n         class=\"slides-container\"\n         [ngStyle]=\"viewDepth()\">\n      <div class=\"slides\"\n           [class.-no-transition]=\"sliderState.active\"\n           [ngStyle]=\"sliderState.style\">\n        <div *ngFor=\"let item of state.items\" class=\"slide\">\n          <ng-container [item]=\"item\"></ng-container>\n        </div>\n      </div>\n    </div>\n    <ng-content></ng-content>\n  "
            },] },
];
GallerySliderComponent.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
]; };
GallerySliderComponent.propDecorators = {
    "state": [{ type: Input },],
    "config": [{ type: Input },],
    "width": [{ type: Input },],
    "height": [{ type: Input },],
    "indexChange": [{ type: Output },],
};
var GalleryCounterComponent = /** @class */ (function () {
    function GalleryCounterComponent() {
    }
    return GalleryCounterComponent;
}());
GalleryCounterComponent.decorators = [
    { type: Component, args: [{
                selector: 'gallery-counter',
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                template: "<div class=\"g-counter\">{{(state.currIndex + 1) + '/' + state.items.length}}</div>"
            },] },
];
GalleryCounterComponent.ctorParameters = function () { return []; };
GalleryCounterComponent.propDecorators = {
    "state": [{ type: Input },],
};
var LazyDirective = /** @class */ (function () {
    function LazyDirective(el, renderer) {
        var _this = this;
        this.el = el;
        this.renderer = renderer;
        this.worker$ = new Subject();
        this.loading = new EventEmitter();
        var img = this.renderer.createElement('img');
        this.worker$.pipe(switchMap(function (imageSrc) {
            _this.loading.emit(true);
            img.src = imageSrc;
            var imageSuccess = fromEvent(img, 'load').pipe(tap(function () {
                _this.renderer.setStyle(_this.el.nativeElement, 'backgroundImage', "url(" + imageSrc + ")");
                _this.loading.emit(false);
            }));
            var imageError = fromEvent(img, 'error').pipe(tap(function () { return _this.loading.emit(false); }));
            return zip(imageSuccess, imageError);
        })).subscribe();
    }
    Object.defineProperty(LazyDirective.prototype, "lazyImage", {
        set: function (imagePath) {
            this.getImage(imagePath);
        },
        enumerable: true,
        configurable: true
    });
    LazyDirective.prototype.getImage = function (imagePath) {
        this.worker$.next(imagePath);
    };
    LazyDirective.prototype.ngOnDestroy = function () {
        this.worker$.unsubscribe();
    };
    return LazyDirective;
}());
LazyDirective.decorators = [
    { type: Directive, args: [{
                selector: '[lazyImage]'
            },] },
];
LazyDirective.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: Renderer2, },
]; };
LazyDirective.propDecorators = {
    "lazyImage": [{ type: Input, args: ['lazyImage',] },],
    "loading": [{ type: Output },],
};
var TapClickDirective = /** @class */ (function () {
    function TapClickDirective(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.tapClick = new EventEmitter();
    }
    TapClickDirective.prototype.ngOnInit = function () {
        this.setTapEvent();
    };
    TapClickDirective.prototype.setTapEvent = function () {
        var _this = this;
        if (typeof Hammer !== 'undefined') {
            this.mc = new Hammer(this.el.nativeElement);
            this.mc.on('tap', function () {
                if (!_this.tapClickDisabled) {
                    _this.tapClick.emit(null);
                }
            });
        }
        else {
            this.clickListener = this.renderer.listen(this.el.nativeElement, 'click', function (e) {
                e.stopPropagation();
                if (!_this.tapClickDisabled) {
                    _this.tapClick.emit(null);
                }
            });
        }
    };
    TapClickDirective.prototype.ngOnDestroy = function () {
        if (this.mc) {
            this.mc.destroy();
        }
        else {
            this.clickListener();
        }
    };
    return TapClickDirective;
}());
TapClickDirective.decorators = [
    { type: Directive, args: [{
                selector: '[tapClick]'
            },] },
];
TapClickDirective.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: Renderer2, },
]; };
TapClickDirective.propDecorators = {
    "tapClickDisabled": [{ type: Input },],
    "tapClick": [{ type: Output },],
};
var GalleryItemDirective = /** @class */ (function () {
    function GalleryItemDirective(componentFactoryResolver, viewContainerRef) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.viewContainerRef = viewContainerRef;
        this.type = 'slide';
    }
    GalleryItemDirective.prototype.ngOnInit = function () {
        var componentFactory = this.componentFactoryResolver
            .resolveComponentFactory(this.item[this.type === 'slide' ? 'component' : 'thumbComponent']);
        this.viewContainerRef.clear();
        var componentRef = this.viewContainerRef.createComponent(componentFactory);
        var galleryItem = componentRef.instance;
        galleryItem.data = this.item.data;
    };
    return GalleryItemDirective;
}());
GalleryItemDirective.decorators = [
    { type: Directive, args: [{
                selector: '[item]'
            },] },
];
GalleryItemDirective.ctorParameters = function () { return [
    { type: ComponentFactoryResolver, },
    { type: ViewContainerRef, },
]; };
GalleryItemDirective.propDecorators = {
    "item": [{ type: Input },],
    "type": [{ type: Input },],
};
function galleryFactory(galleryConfig) {
    return new Gallery(galleryConfig);
}
var GalleryModule = /** @class */ (function () {
    function GalleryModule() {
    }
    GalleryModule.forRoot = function (config) {
        return {
            ngModule: GalleryModule,
            providers: [
                {
                    provide: GALLERY_CONFIG,
                    useValue: config
                },
                {
                    provide: Gallery,
                    useFactory: galleryFactory,
                    deps: [GALLERY_CONFIG]
                }
            ]
        };
    };
    return GalleryModule;
}());
GalleryModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    GalleryComponent,
                    GalleryCoreComponent,
                    GalleryNavComponent,
                    GalleryThumbComponent,
                    GalleryDotsComponent,
                    GallerySliderComponent,
                    GalleryCounterComponent,
                    ImageItemComponent,
                    VideoItemComponent,
                    IframeItemComponent,
                    ThumbnailItemComponent,
                    GalleryItemDirective,
                    LazyDirective,
                    TapClickDirective
                ],
                exports: [
                    GalleryComponent,
                    LazyDirective,
                    TapClickDirective
                ],
                entryComponents: [
                    IframeItemComponent,
                    ImageItemComponent,
                    VideoItemComponent,
                    ThumbnailItemComponent
                ]
            },] },
];
GalleryModule.ctorParameters = function () { return []; };

export { Gallery, GalleryRef, GalleryAction, ImageItem, VideoItem, IframeItem, YoutubeItem, ImageItemComponent, VideoItemComponent, IframeItemComponent, ThumbnailItemComponent, galleryFactory, GalleryModule, GalleryCoreComponent as ɵe, GalleryCounterComponent as ɵj, GalleryDotsComponent as ɵh, GalleryNavComponent as ɵf, GallerySliderComponent as ɵi, GalleryThumbComponent as ɵg, GalleryComponent as ɵd, GalleryItemDirective as ɵo, LazyDirective as ɵp, TapClickDirective as ɵq, IframeItemComponent as ɵm, ImageItemComponent as ɵk, ThumbnailItemComponent as ɵn, VideoItemComponent as ɵl, GALLERY_CONFIG as ɵa };
//# sourceMappingURL=ngx-gallery-core.js.map
