import { Component, ChangeDetectionStrategy, InjectionToken, Inject, Injectable, NgModule } from '@angular/core';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { Gallery, GalleryModule } from '@ngx-gallery/core';
import { Overlay, OverlayModule } from '@angular/cdk/overlay';
import { ComponentPortal } from '@angular/cdk/portal';
import { LEFT_ARROW, RIGHT_ARROW, ESCAPE } from '@angular/cdk/keycodes';
import { CommonModule } from '@angular/common';

var LightboxComponent = /** @class */ (function () {
    function LightboxComponent() {
    }
    LightboxComponent.prototype.ngOnDestroy = function () {
        this.close();
    };
    return LightboxComponent;
}());
LightboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'lightbox',
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false,
                animations: [
                    trigger('slideGalleryIn', [
                        state('void', style({ transform: 'translateY(25%) scale(0.9)', opacity: 0 })),
                        state('enter', style({ transform: 'translateY(0%) scale(1)', opacity: 1 })),
                        state('exit', style({ transform: 'translateY(25%)', opacity: 0 })),
                        transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),
                    ])
                ],
                template: "\n    <gallery [@slideGalleryIn] [id]=\"id\" [destroyRef]=\"false\">\n      <div class=\"g-btn-close\" (tapClick)=\"close()\"></div>\n    </gallery>\n  "
            },] },
];
LightboxComponent.ctorParameters = function () { return []; };
var LIGHTBOX_CONFIG = new InjectionToken('lightboxConfig');
var defaultConfig = {
    backdropClass: 'g-backdrop',
    panelClass: 'g-overlay',
    hasBackdrop: true,
    keyboardShortcuts: true
};
var Lightbox = /** @class */ (function () {
    function Lightbox(config, _gallery, _overlay) {
        this._gallery = _gallery;
        this._overlay = _overlay;
        this.config = Object.assign({}, defaultConfig, config);
    }
    Lightbox.prototype.setConfig = function (config) {
        this.config = Object.assign({}, this.config, config);
    };
    Lightbox.prototype.open = function (i, id, config) {
        var _this = this;
        if (i === void 0) { i = 0; }
        if (id === void 0) { id = 'lightbox'; }
        var _config = config ? Object.assign({}, this.config, config) : this.config;
        var overlayConfig = {
            backdropClass: _config.backdropClass,
            panelClass: _config.panelClass,
            hasBackdrop: _config.hasBackdrop,
            positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),
            scrollStrategy: this._overlay.scrollStrategies.block()
        };
        var galleryRef = this._gallery.ref(id);
        galleryRef.set(i);
        this._overlayRef = this._overlay.create(overlayConfig);
        var galleryPortal = new ComponentPortal(LightboxComponent);
        var compRef = this._overlayRef.attach(galleryPortal);
        compRef.instance.id = id;
        compRef.instance.close = function () { return _this.close(); };
        if (_config.hasBackdrop) {
            this._overlayRef.backdropClick().subscribe(function () { return _this.close(); });
        }
        if (_config.keyboardShortcuts) {
            this._overlayRef.keydownEvents().subscribe(function (event) {
                switch (event.keyCode) {
                    case LEFT_ARROW:
                        galleryRef.prev(id);
                        break;
                    case RIGHT_ARROW:
                        galleryRef.next(id);
                        break;
                    case ESCAPE:
                        _this.close();
                }
            });
        }
    };
    Lightbox.prototype.close = function () {
        if (this._overlayRef.hasAttached()) {
            this._overlayRef.dispose();
        }
    };
    return Lightbox;
}());
Lightbox.decorators = [
    { type: Injectable },
];
Lightbox.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Inject, args: [LIGHTBOX_CONFIG,] },] },
    { type: Gallery, },
    { type: Overlay, },
]; };
function lightboxFactory(config, gallery, overlay) {
    return new Lightbox(config, gallery, overlay);
}
var LightboxModule = /** @class */ (function () {
    function LightboxModule() {
    }
    LightboxModule.forRoot = function (config) {
        return {
            ngModule: LightboxModule,
            providers: [
                {
                    provide: LIGHTBOX_CONFIG,
                    useValue: config
                },
                {
                    provide: Lightbox,
                    useFactory: lightboxFactory,
                    deps: [LIGHTBOX_CONFIG, Gallery, Overlay]
                }
            ]
        };
    };
    return LightboxModule;
}());
LightboxModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    OverlayModule,
                    GalleryModule
                ],
                declarations: [
                    LightboxComponent
                ],
                entryComponents: [
                    LightboxComponent
                ]
            },] },
];
LightboxModule.ctorParameters = function () { return []; };

export { LightboxComponent, Lightbox, lightboxFactory, LightboxModule, LIGHTBOX_CONFIG as Éµa };
//# sourceMappingURL=ngx-gallery-lightbox.js.map
