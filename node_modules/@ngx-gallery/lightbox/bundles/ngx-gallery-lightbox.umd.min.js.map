{
  "version": 3,
  "file": "ngx-gallery-lightbox.umd.min.js",
  "sources": [
    "ng://@ngx-gallery/lightbox/out/lightbox.component.ts",
    "ng://@ngx-gallery/lightbox/out/lightbox.token.ts",
    "ng://@ngx-gallery/lightbox/out/lightbox.default.ts",
    "ng://@ngx-gallery/lightbox/out/lightbox.service.ts",
    "ng://@ngx-gallery/lightbox/out/lightbox.module.ts"
  ],
  "sourcesContent": [
    "import { Component, ChangeDetectionStrategy, OnDestroy } from '@angular/core';\r\nimport { animate, state, style, transition, trigger } from '@angular/animations';\r\n\r\n@Component({\r\n  selector: 'lightbox',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  preserveWhitespaces: false,\r\n  animations: [\r\n    trigger('slideGalleryIn', [\r\n      state('void', style({transform: 'translateY(25%) scale(0.9)', opacity: 0})),\r\n      state('enter', style({transform: 'translateY(0%) scale(1)', opacity: 1})),\r\n      state('exit', style({transform: 'translateY(25%)', opacity: 0})),\r\n      transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\r\n    ])\r\n  ],\r\n  template: `\r\n    <gallery [@slideGalleryIn] [id]=\"id\" [destroyRef]=\"false\">\r\n      <div class=\"g-btn-close\" (tapClick)=\"close()\"></div>\r\n    </gallery>\r\n  `\r\n})\r\nexport class LightboxComponent implements OnDestroy {\r\n\r\n  id: string;\r\n  close: any;\r\n\r\n  ngOnDestroy() {\r\n    this.close();\r\n  }\r\n}\r\n",
    "import { InjectionToken } from '@angular/core';\r\nimport { LightboxConfig } from './lightbox.model';\r\n\r\nexport const LIGHTBOX_CONFIG = new InjectionToken<LightboxConfig>('lightboxConfig');\r\n",
    "import { LightboxConfig } from './lightbox.model';\r\n\r\nexport const defaultConfig: LightboxConfig = {\r\n  backdropClass: 'g-backdrop',\r\n  panelClass: 'g-overlay',\r\n  hasBackdrop: true,\r\n  keyboardShortcuts: true\r\n};\r\n",
    "import { ComponentRef, Inject, Injectable } from '@angular/core';\r\nimport { Gallery } from '@ngx-gallery/core';\r\nimport { LIGHTBOX_CONFIG } from './lightbox.token';\r\nimport { LightboxConfig } from './lightbox.model';\r\nimport { defaultConfig } from './lightbox.default';\r\nimport { Overlay } from '@angular/cdk/overlay';\r\nimport { OverlayRef } from '@angular/cdk/overlay';\r\nimport { OverlayConfig } from '@angular/cdk/overlay';\r\nimport { ComponentPortal } from '@angular/cdk/portal';\r\nimport { LEFT_ARROW } from '@angular/cdk/keycodes';\r\nimport { RIGHT_ARROW } from '@angular/cdk/keycodes';\r\nimport { ESCAPE } from '@angular/cdk/keycodes';\r\nimport { LightboxComponent } from './lightbox.component';\r\n\r\n@Injectable()\r\nexport class Lightbox {\r\n\r\n  /** Gallery overlay ref */\r\n  private _overlayRef: OverlayRef;\r\n\r\n  /** Global config */\r\n  private config: LightboxConfig;\r\n\r\n  constructor(@Inject(LIGHTBOX_CONFIG) config: LightboxConfig, private _gallery: Gallery, private _overlay: Overlay) {\r\n    this.config = {...defaultConfig, ...config};\r\n  }\r\n\r\n  /**\r\n   * Set Lightbox Config\r\n   * @param config - LightboxConfig\r\n   */\r\n  setConfig(config: LightboxConfig) {\r\n    this.config = {...this.config, ...config};\r\n  }\r\n\r\n  /**\r\n   * Open Lightbox Overlay\r\n   * @param i - Current Index\r\n   * @param id - Gallery ID\r\n   * @param config - Lightbox Config\r\n   */\r\n  open(i = 0, id = 'lightbox', config?: LightboxConfig) {\r\n\r\n    const _config = config ? { ...this.config, ...config } : this.config;\r\n\r\n    const overlayConfig: OverlayConfig = {\r\n      backdropClass: _config.backdropClass,\r\n      panelClass: _config.panelClass,\r\n      hasBackdrop: _config.hasBackdrop,\r\n      positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),\r\n      scrollStrategy: this._overlay.scrollStrategies.block()\r\n    };\r\n\r\n    const galleryRef = this._gallery.ref(id);\r\n    galleryRef.set(i);\r\n\r\n    this._overlayRef = this._overlay.create(overlayConfig);\r\n\r\n    /** Attach gallery to the overlay */\r\n    const galleryPortal = new ComponentPortal(LightboxComponent);\r\n    const compRef: ComponentRef<LightboxComponent> = this._overlayRef.attach(galleryPortal);\r\n\r\n    compRef.instance.id = id;\r\n    compRef.instance.close = () => this.close();\r\n\r\n    if (_config.hasBackdrop) {\r\n      this._overlayRef.backdropClick().subscribe(() => this.close());\r\n    }\r\n\r\n    if (_config.keyboardShortcuts) {\r\n      this._overlayRef.keydownEvents().subscribe((event) => {\r\n        switch (event.keyCode) {\r\n          case LEFT_ARROW:\r\n            galleryRef.prev(id);\r\n            break;\r\n          case RIGHT_ARROW:\r\n            galleryRef.next(id);\r\n            break;\r\n          case ESCAPE:\r\n            this.close();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Close Lightbox Overlay\r\n   */\r\n  close() {\r\n    if (this._overlayRef.hasAttached()) {\r\n      this._overlayRef.dispose();\r\n    }\r\n  }\r\n}\r\n",
    "import { InjectionToken, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\r\nimport { Gallery, GalleryModule } from '@ngx-gallery/core';\r\n\r\nimport { LightboxConfig } from './lightbox.model';\r\nimport { LIGHTBOX_CONFIG } from './lightbox.token';\r\nimport { Lightbox } from './lightbox.service';\r\nimport { LightboxComponent } from './lightbox.component';\r\n\r\nexport function lightboxFactory(config: LightboxConfig, gallery: Gallery, overlay: Overlay) {\r\n  return new Lightbox(config, gallery, overlay);\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    OverlayModule,\r\n    GalleryModule\r\n  ],\r\n  declarations: [\r\n    LightboxComponent\r\n  ],\r\n  entryComponents: [\r\n    LightboxComponent\r\n  ]\r\n})\r\nexport class LightboxModule {\r\n  static forRoot(config?: LightboxConfig) {\r\n\r\n    return {\r\n      ngModule: LightboxModule,\r\n      providers: [\r\n        {\r\n          provide: LIGHTBOX_CONFIG,\r\n          useValue: config\r\n        },\r\n        {\r\n          provide: Lightbox,\r\n          useFactory: lightboxFactory,\r\n          deps: [LIGHTBOX_CONFIG, Gallery, Overlay]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"
  ],
  "names": [
    "LightboxComponent",
    "prototype",
    "ngOnDestroy",
    "this",
    "close",
    "type",
    "Component",
    "args",
    "selector",
    "changeDetection",
    "ChangeDetectionStrategy",
    "OnPush",
    "preserveWhitespaces",
    "animations",
    "trigger",
    "state",
    "style",
    "transform",
    "opacity",
    "transition",
    "animate",
    "template",
    "LIGHTBOX_CONFIG",
    "InjectionToken",
    "defaultConfig",
    "backdropClass",
    "panelClass",
    "hasBackdrop",
    "keyboardShortcuts",
    "Lightbox",
    "config",
    "_gallery",
    "_overlay",
    "Object",
    "assign",
    "setConfig",
    "open",
    "i",
    "id",
    "_this",
    "_config",
    "overlayConfig",
    "positionStrategy",
    "position",
    "global",
    "centerHorizontally",
    "centerVertically",
    "scrollStrategy",
    "scrollStrategies",
    "block",
    "galleryRef",
    "ref",
    "set",
    "_overlayRef",
    "create",
    "galleryPortal",
    "ComponentPortal",
    "compRef",
    "attach",
    "instance",
    "backdropClick",
    "subscribe",
    "keydownEvents",
    "event",
    "keyCode",
    "LEFT_ARROW",
    "prev",
    "RIGHT_ARROW",
    "next",
    "ESCAPE",
    "hasAttached",
    "dispose",
    "lightboxFactory",
    "gallery",
    "overlay",
    "Injectable",
    "undefined",
    "decorators",
    "Inject",
    "Gallery",
    "Overlay",
    "LightboxModule",
    "forRoot",
    "ngModule",
    "providers",
    "provide",
    "useValue",
    "useFactory",
    "deps",
    "NgModule",
    "imports",
    "CommonModule",
    "OverlayModule",
    "GalleryModule",
    "declarations",
    "entryComponents"
  ],
  "mappings": "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"
}
